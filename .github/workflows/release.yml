name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write
  checks: write
  statuses: write

env:
  PNPM_VERSION: 9.12.3
  NODE_VERSION: 22.0.0

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          title: "chore: version packages"
          commit: "chore: version packages"
          publish: pnpm release:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Only runs if packages were published
      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              // Get the latest tag
              const latestTag = execSync('git describe --tags --abbrev=0').toString().trim();
              
              // Check if release exists
              try {
                await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: latestTag
                });
                console.log(`Release for tag ${latestTag} already exists, skipping creation`);
                return;
              } catch (error) {
                if (error.status !== 404) throw error;
              }
              
              // Create changelog content
              const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
              
              // Create a release
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: latestTag,
                name: `Release ${latestTag}`,
                body: changelog,
                draft: false,
                prerelease: false,
                generate_release_notes: true
              });
            } catch (error) {
              console.error('Error creating release:', error);
              // Don't fail the workflow if release creation fails
              // The packages are already published at this point
            } 